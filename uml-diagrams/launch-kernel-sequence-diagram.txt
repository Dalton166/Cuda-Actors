@startuml

this is for opencl + actors but its a start 

actor Client
participant "Actor System" as System
participant "OpenCL Manager" as Manager
participant "Actor Facade" as Facade
participant "OpenCL Device" as Device
participant "Command Queue" as Queue

Client -> System: Create actor_system with OpenCL module
System -> Manager: Load OpenCL module
Manager -> Device: Discover platforms and devices
note right: Lazy platform discovery
Device --> Manager: Return platform and device info
Manager --> System: Module initialized

Client -> System: Spawn OpenCL actor (kernel_source, kernel_name, nd_range, preprocess, postprocess)
System -> Manager: spawn(kernel_source, kernel_name, nd_range, preprocess, postprocess)
Manager -> Device: Create cl_context and cl_program
Device --> Manager: Context and program created
Manager -> Facade: Create actor_facade with kernel
Facade --> Manager: Return actor handle
Manager --> System: Return actor handle
System --> Client: Return actor handle

Client -> Facade: Send message with input data
Facade -> Facade: Preprocess message (convert input to OpenCL format)
Facade -> Queue: clEnqueueNDRangeKernel(kernel, nd_range, args)
Queue -> Device: Execute kernel
note right: Asynchronous kernel execution
Device --> Queue: Kernel execution complete (event CL_COMPLETE)
Queue -> Facade: Invoke callback with result
Facade -> Facade: Postprocess result (convert to CAF message)
Facade -> Client: Send response message with result

@enduml
